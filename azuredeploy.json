{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "2.0.0.0",
  "parameters": {
    "appName": {
      "type": "string",
      "minLength": 3,
      "metadata": {
        "description": "Specifies the name of the app."
      },
      "defaultValue": "nrfassettracker"
    },
    "storageAccountName": {
      "type": "string",
      "minLength": 3,
      "metadata": {
        "description": "Specifies the storage account name to use, which is globally unique."
      },
      "defaultValue": "[parameters('appName')]"
    },
    "keyVaultName": {
      "type": "string",
      "minLength": 3,
      "metadata": {
        "description": "Specifies the name of the keyVaultName."
      },
      "defaultValue": "assetTracker"
    },
    "appRegistrationClientId": {
      "type": "string",
      "minLength": 36,
      "maxLength": 36,
      "metadata": {
        "description": "Client ID of the Active Directory App Registration used for authentication"
      }
    },
    "b2cTenant": {
      "type": "string",
      "minLength": 3,
      "metadata": {
        "description": "Initial domain name of the created Active Directory B2C"
      }
    },
    "b2cFlowName": {
      "type": "string",
      "minLength": 3,
      "defaultValue": "B2C_1_signup_signin",
      "metadata": {
        "description": "Name of the login flow"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "iotHubSkuName": {
      "type": "string",
      "defaultValue": "S1",
      "metadata": {
        "description": "Specifies the IotHub SKU. At minimum S1 is needed for IoT Device Update."
      }
    },
    "capacityUnits": {
      "type": "int",
      "minValue": 1,
      "maxValue": 1,
      "defaultValue": 1,
      "metadata": {
        "description": "Specifies the number of provisioned IoT Hub units. Restricted to 1 unit for the F1 SKU. Can be set up to maximum number allowed for subscription."
      }
    },
    "SignalRpricingTier": {
      "type": "string",
      "defaultValue": "Free_F1",
      "allowedValues": ["Free_F1", "Standard_S1"],
      "metadata": {
        "description": "The pricing tier of the SignalR resource."
      }
    },
    "SignalRcapacity": {
      "type": "int",
      "defaultValue": 1,
      "allowedValues": [1, 2, 5, 10, 20, 50, 100],
      "metadata": {
        "description": "The number of SignalR Unit."
      }
    },
    "enableUnwiredLabsCellLocation": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to enable cell geolocation using Unwired Labs API"
      }
    },
    "unwiredlabsApiEndpoint": {
      "type": "string",
      "defaultValue": "https://eu1.unwiredlabs.com/",
      "metadata": {
        "description": "Endpoint to use for the unwiredlabs.com cell geolocation API"
      }
    },
    "nrfCloudTeamId": {
      "type": "string",
      "metadata": {
        "description": "your nRF Cloud team id"
      }
    },
    "enableNrfCloudCellLocationService": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to enable cell geolocation using nRF Cloud API"
      }
    },
    "enableNrfCloudAGPSLocationService": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to enable nRF Cloud Assisted GPS Location Service"
      }
    },
    "enableNrfCloudPGPSLocationService": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to enable nRF Cloud Predicted GPS Location Service"
      }
    },
    "nrfCloudApiEndpoint": {
      "type": "string",
      "defaultValue": "https://api.nrfcloud.com/",
      "metadata": {
        "description": "Endpoint to use for the nRF Cloud API"
      }
    },
    "agpsBinHours": {
      "type": "string",
      "defaultValue": "1",
      "metadata": {
        "description": "Number of hours to bin A-GPS requests"
      }
    },
    "agpsRequestDatabaseName": {
      "type": "string",
      "minLength": 3,
      "metadata": {
        "description": "Name for the database that stores A-GPS requests"
      },
      "defaultValue": "agpsRequests"
    },
    "agpsRequestContainerName": {
      "type": "string",
      "minLength": 3,
      "metadata": {
        "description": "Name for the container that stores A-GPS requests"
      },
      "defaultValue": "cache"
    },
    "agpsRequestQueueName": {
      "type": "string",
      "minLength": 3,
      "metadata": {
        "description": "Name for the queue that stores A-GPS requests"
      },
      "defaultValue": "agpsrequests"
    },
    "agpsRequestNrfCloudQueueName": {
      "type": "string",
      "minLength": 3,
      "metadata": {
        "description": "Name for the queue that stores A-GPS requests to be resolved using the nRF Cloud API"
      },
      "defaultValue": "nrfcloudagpsrequests"
    },
    "agpsRequestIotEventsConsumerGroupName": {
      "type": "string",
      "minLength": 3,
      "metadata": {
        "description": "Consumer group name for A-GPS device requests"
      },
      "defaultValue": "agpsRequests"
    },
    "pgpsBinHours": {
      "type": "string",
      "defaultValue": "1",
      "metadata": {
        "description": "Number of hours to bin P-GPS requests"
      }
    },
    "pgpsRequestDatabaseName": {
      "type": "string",
      "minLength": 3,
      "metadata": {
        "description": "Name for the database that stores P-GPS requests"
      },
      "defaultValue": "pgpsRequests"
    },
    "pgpsRequestContainerName": {
      "type": "string",
      "minLength": 3,
      "metadata": {
        "description": "Name for the container that stores P-GPS requests"
      },
      "defaultValue": "cache"
    },
    "pgpsRequestQueueName": {
      "type": "string",
      "minLength": 3,
      "metadata": {
        "description": "Name for the queue that stores P-GPS requests"
      },
      "defaultValue": "pgpsrequests"
    },
    "pgpsRequestNrfCloudQueueName": {
      "type": "string",
      "minLength": 3,
      "metadata": {
        "description": "Name for the queue that stores P-GPS requests to be resolved using the nRF Cloud API"
      },
      "defaultValue": "nrfcloudpgpsrequests"
    },
    "pgpsRequestIotEventsConsumerGroupName": {
      "type": "string",
      "minLength": 3,
      "metadata": {
        "description": "Consumer group name for P-GPS device requests"
      },
      "defaultValue": "pgpsRequests"
    },
    "cellGeoLocationIotEventsConsumerGroupName": {
      "type": "string",
      "minLength": 3,
      "metadata": {
        "description": "Consumer group name for cell geolocation updates"
      },
      "defaultValue": "cellgeolocation"
    },
    "ncellmeasReportsDatabaseName": {
      "type": "string",
      "minLength": 3,
      "metadata": {
        "description": "Name for the database that stores neighbor cell measurement reports"
      },
      "defaultValue": "ncellmeasReports"
    },
    "ncellmeasReportsNrfCloudLocationCacheContainerName": {
      "type": "string",
      "minLength": 3,
      "metadata": {
        "description": "Name for the container that stores neighbor cell measurement report geo locations from nRF Cloud"
      },
      "defaultValue": "nrfcloudcache"
    },
    "ncellmeasReportsContainerName": {
      "type": "string",
      "minLength": 3,
      "metadata": {
        "description": "Name for the container that stores neighbor cell measurement reports"
      },
      "defaultValue": "report"
    },
    "ncellmeasReportsQueueName": {
      "type": "string",
      "minLength": 3,
      "metadata": {
        "description": "Name for the queue that stores neighbor cell measurement reports"
      },
      "defaultValue": "ncellmeasreports"
    },
    "ncellmeasReportsNrfCloudQueueName": {
      "type": "string",
      "minLength": 3,
      "metadata": {
        "description": "Name for the queue that stores neighbor cell measurement reports to be resolved using the nRF Cloud API"
      },
      "defaultValue": "nrfcloudncellmeasreports"
    },
    "ncellmeasReportsIotEventsConsumerGroupName": {
      "type": "string",
      "minLength": 3,
      "metadata": {
        "description": "Consumer group name for neighbor cell measurement reports"
      },
      "defaultValue": "ncellmeasReports"
    },
    "storeDeviceUpdatesIotEventsConsumerGroupName": {
      "type": "string",
      "minLength": 3,
      "metadata": {
        "description": "Consumer group name for storing device updates"
      },
      "defaultValue": "storedeviceupdate"
    }
  },
  "variables": {
    "iotHubResourceId": "[resourceId('Microsoft.Devices/Iothubs', concat(parameters('appName'), 'IotHub'))]",
    "iotHubKeyResource": "[resourceId('Microsoft.Devices/Iothubs/Iothubkeys', concat(parameters('appName'), 'IotHub'), 'iothubowner')]",
    "storageAccountId": "[concat(resourceGroup().id,'/providers/','Microsoft.Storage/storageAccounts/', parameters('storageAccountName'))]",
    "keyVaultSecretsUser": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
    "uniqueRoleGuidKeyVaultSecretsUser": "[guid(resourceId('Microsoft.KeyVault/vaults',  parameters('keyVaultName')), variables('keyVaultSecretsUser'), resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')))]",
    "managedIdentity": "[concat(parameters('appName'), '-', 'functionapp-identity')]"
  },
  "resources": [
    {
      "type": "Microsoft.Devices/IotHubs",
      "apiVersion": "2020-03-01",
      "name": "[concat(parameters('appName'), 'IotHub')]",
      "location": "[parameters('location')]",
      "properties": {
        "cloudToDevice": {
          "defaultTtlAsIso8601": "PT1H",
          "maxDeliveryCount": 10,
          "feedback": {
            "ttlAsIso8601": "PT1H",
            "lockDurationAsIso8601": "PT60S",
            "maxDeliveryCount": 10
          }
        },
        "eventHubEndpoints": {
          "events": {
            "retentionTimeInDays": 1,
            "partitionCount": 2
          }
        },
        "routing": {
          "routes": [
            {
              "name": "twinChangeEventsToEventHub",
              "source": "TwinChangeEvents",
              "condition": "true",
              "endpointNames": ["events"],
              "isEnabled": true
            },
            {
              "name": "deviceMessagesToEventHub",
              "source": "DeviceMessages",
              "condition": "true",
              "endpointNames": ["events"],
              "isEnabled": true
            }
          ]
        }
      },
      "sku": {
        "name": "[parameters('iotHubSkuName')]",
        "capacity": "[parameters('capacityUnits')]"
      }
    },
    {
      "type": "Microsoft.Devices/iotHubs/eventhubEndpoints/ConsumerGroups",
      "apiVersion": "2020-03-01",
      "name": "[concat(parameters('appName'), 'IotHub', '/events/publishdeviceupdates')]",
      "dependsOn": [
        "[resourceId('Microsoft.Devices/IotHubs', concat(parameters('appName'), 'IotHub'))]"
      ]
    },
    {
      "type": "Microsoft.Devices/iotHubs/eventhubEndpoints/ConsumerGroups",
      "apiVersion": "2020-03-01",
      "name": "[concat(parameters('appName'), 'IotHub', '/events/', parameters('storeDeviceUpdatesIotEventsConsumerGroupName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Devices/IotHubs', concat(parameters('appName'), 'IotHub'))]"
      ]
    },
    {
      "condition": "[parameters('enableNrfCloudAGPSLocationService')]",
      "type": "Microsoft.Devices/iotHubs/eventhubEndpoints/ConsumerGroups",
      "apiVersion": "2020-03-01",
      "name": "[concat(parameters('appName'), 'IotHub', '/events/', parameters('agpsRequestIotEventsConsumerGroupName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Devices/IotHubs', concat(parameters('appName'), 'IotHub'))]"
      ]
    },
    {
      "condition": "[parameters('enableNrfCloudAGPSLocationService')]",
      "type": "Microsoft.Devices/iotHubs/eventhubEndpoints/ConsumerGroups",
      "apiVersion": "2020-03-01",
      "name": "[concat(parameters('appName'), 'IotHub', '/events/', parameters('pgpsRequestIotEventsConsumerGroupName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Devices/IotHubs', concat(parameters('appName'), 'IotHub'))]"
      ]
    },
    {
      "type": "Microsoft.Devices/iotHubs/eventhubEndpoints/ConsumerGroups",
      "apiVersion": "2020-03-01",
      "name": "[concat(parameters('appName'), 'IotHub', '/events/', parameters('cellGeoLocationIotEventsConsumerGroupName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Devices/IotHubs', concat(parameters('appName'), 'IotHub'))]"
      ]
    },
    {
      "type": "Microsoft.Devices/iotHubs/eventhubEndpoints/ConsumerGroups",
      "condition": "[parameters('enableNrfCloudCellLocationService')]",
      "apiVersion": "2020-03-01",
      "name": "[concat(parameters('appName'), 'IotHub', '/events/', parameters('ncellmeasReportsIotEventsConsumerGroupName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Devices/IotHubs', concat(parameters('appName'), 'IotHub'))]"
      ]
    },
    {
      "type": "Microsoft.Devices/provisioningServices",
      "sku": {
        "name": "S1",
        "capacity": 1
      },
      "name": "[concat(parameters('appName'), 'ProvisioningService')]",
      "apiVersion": "2021-10-15",
      "location": "[parameters('location')]",
      "properties": {
        "iotHubs": [
          {
            "connectionString": "[concat('HostName=', reference(variables('iotHubResourceId')).hostName, ';SharedAccessKeyName=iothubowner;SharedAccessKey=', listkeys(variables('iotHubKeyResource'), '2017-07-01').primaryKey)]",
            "location": "[parameters('location')]",
            "name": "[concat(parameters('appName'), 'IotHub','.azure-devices.net')]"
          }
        ]
      },
      "dependsOn": ["[concat(parameters('appName'), 'IotHub')]"]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "name": "[parameters('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": false
      }
    },
    {
      "name": "[concat(parameters('storageAccountName'),'/default/avatars')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2019-06-01",
      "properties": {
        "publicAccess": "Blob"
      },
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', parameters('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2019-08-01",
      "name": "[concat(parameters('appName'), 'ServerFarm')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Y1",
        "tier": "Dynamic"
      },
      "properties": {
        "name": "[concat(parameters('appName'), 'ServerFarm')]",
        "computeMode": "Dynamic"
      }
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "name": "[variables('managedIdentity')]",
      "apiVersion": "2018-11-30",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2019-08-01",
      "name": "[concat(parameters('appName'), 'API')]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "identity": {
        "type": "SystemAssigned,UserAssigned",
        "userAssignedIdentities": {
          "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentity'))]": {}
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', concat(parameters('appName'), 'ServerFarm'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
        "[concat(parameters('appName'), 'IotHub')]",
        "[concat(parameters('appName'), 'SignalR')]"
      ],
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', concat(parameters('appName'), 'ServerFarm'))]",
        "siteConfig": {
          "use32BitWorkerProcess": false,
          "cors": {
            "allowedOrigins": ["*"],
            "supportCredentials": false
          },
          "http20Enabled": true,
          "ftpsState": "Disabled"
        },
        "httpsOnly": true
      },
      "resources": [
        {
          "apiVersion": "2019-08-01",
          "name": "web",
          "type": "config",
          "dependsOn": [
            "[concat('Microsoft.Web/Sites/', concat(parameters('appName'), 'API'))]",
            "[resourceId('Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
          ],
          "properties": {
            "siteAuthEnabled": true,
            "siteAuthSettings": {
              "configVersion": "v2",
              "enabled": true,
              "unauthenticatedClientAction": "RedirectToLoginPage",
              "tokenStoreEnabled": true,
              "defaultProvider": "AzureActiveDirectory",
              "clientId": "[parameters('appRegistrationClientId')]",
              "issuer": "[concat('https://',parameters('b2cTenant'),'.b2clogin.com/',parameters('b2cTenant'),'.onmicrosoft.com/',parameters('b2cFlowName'),'/v2.0/')]",
              "runtimeVersion": "~1",
              "httpApiPrefixPath": "/.auth",
              "allowedExternalRedirectUrls": [
                "[concat('https://', parameters('appName'), 'app.z16.web.core.windows.net/')]",
                "http://localhost:3000/"
              ],
              "tokenRefreshExtensionHours": 72,
              "allowedAudiences": [],
              "isAadAutoProvisioned": false,
              "aadClaimsAuthorization": "{\"allowed_groups\":null,\"allowed_client_applications\":null}"
            },
            "appSettings": [
              {
                "name": "AZURE_CLIENT_ID",
                "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentity'))).clientId]"
              },
              {
                "name": "AzureWebJobsStorage",
                "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountId'),'2015-05-01-preview').key1)]"
              },
              {
                "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountId'),'2015-05-01-preview').key1)]"
              },
              {
                "name": "WEBSITE_CONTENTSHARE",
                "value": "[toLower(concat(parameters('appName'), 'API'))]"
              },
              {
                "name": "FUNCTIONS_EXTENSION_VERSION",
                "value": "~3"
              },
              {
                "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                "value": "[reference(resourceId('microsoft.insights/components/', concat(parameters('appName'), 'Insights')), '2015-05-01').InstrumentationKey]"
              },
              {
                "name": "FUNCTIONS_WORKER_RUNTIME",
                "value": "node"
              },
              {
                "name": "WEBSITE_NODE_DEFAULT_VERSION",
                "value": "~14"
              },
              {
                "name": "WEBSITE_RUN_FROM_PACKAGE",
                "value": "1"
              },
              {
                "name": "IOTHUB_CONNECTION_STRING",
                "value": "[concat('HostName=', reference(resourceId('Microsoft.Devices/IoTHubs', concat(parameters('appName'), 'IotHub')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).hostName, ';SharedAccessKeyName=iothubowner;SharedAccessKey=', listKeys(resourceId('Microsoft.Devices/IotHubs', concat(parameters('appName'), 'IotHub')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).value[0].primaryKey)]"
              },
              {
                "name": "STORAGE_ACCOUNT_NAME",
                "value": "[parameters('storageAccountName')]"
              },
              {
                "name": "STORAGE_ACCESS_KEY",
                "value": "[listKeys(variables('storageAccountId'), '2019-04-01').keys[0].value]"
              },
              {
                "name": "IOTHUB_EVENTS_CONNECTION_STRING",
                "value": "[concat('Endpoint=', reference(resourceId('Microsoft.Devices/IoTHubs', concat(parameters('appName'), 'IotHub')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).eventHubEndpoints.events.endpoint, ';SharedAccessKeyName=iothubowner;SharedAccessKey=', listKeys(resourceId('Microsoft.Devices/IotHubs', concat(parameters('appName'), 'IotHub')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).value[0].primaryKey, ';EntityPath=', reference(resourceId('Microsoft.Devices/IoTHubs', concat(parameters('appName'), 'IotHub')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).eventHubEndpoints.events.path)]"
              },
              {
                "name": "IOTHUB_EVENTS_EVENT_HUB_NAME",
                "value": "[reference(resourceId('Microsoft.Devices/IoTHubs', concat(parameters('appName'), 'IotHub')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).eventHubEndpoints.events.path]"
              },
              {
                "name": "COSMOSDB_CONNECTION_STRING",
                "value": "[listConnectionStrings(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('appName')), providers('Microsoft.DocumentDb', 'databaseAccounts').apiVersions[0]).connectionStrings[0].connectionString]"
              },
              {
                "condition": "[parameters('enableUnwiredLabsCellLocation')]",
                "name": "UNWIREDLABS_API_ENDPOINT",
                "value": "[parameters('unwiredlabsApiEndpoint')]"
              },
              {
                "condition": "[not(empty(parameters('nrfCloudTeamId')))]",
                "name": "NRFCLOUD_TEAM_ID",
                "value": "[parameters('nrfCloudTeamId')]"
              },
              {
                "condition": "[not(empty(parameters('nrfCloudTeamId')))]",
                "name": "NRFCLOUD_API_ENDPOINT",
                "value": "[parameters('nrfCloudApiEndpoint')]"
              },
              {
                "name": "KEYVAULT_NAME",
                "value": "[parameters('keyVaultName')]"
              },
              {
                "name": "AGPS_BIN_HOURS",
                "value": "[parameters('agpsBinHours')]"
              },
              {
                "name": "AGPS_REQUESTS_IOT_EVENTS_CONSUMER_GROUP_NAME",
                "value": "[parameters('agpsRequestIotEventsConsumerGroupName')]"
              },
              {
                "name": "AGPS_REQUESTS_DATABASE_NAME",
                "value": "[parameters('agpsRequestDatabaseName')]"
              },
              {
                "name": "AGPS_REQUESTS_CONTAINER_NAME",
                "value": "[parameters('agpsRequestContainerName')]"
              },
              {
                "name": "AGPS_REQUESTS_QUEUE_NAME",
                "value": "[parameters('agpsRequestQueueName')]"
              },
              {
                "name": "AGPS_REQUESTS_NRFCLOUD_QUEUE_NAME",
                "value": "[parameters('agpsRequestNrfCloudQueueName')]"
              },
              {
                "name": "PGPS_BIN_HOURS",
                "value": "[parameters('pgpsBinHours')]"
              },
              {
                "name": "PGPS_REQUESTS_IOT_EVENTS_CONSUMER_GROUP_NAME",
                "value": "[parameters('pgpsRequestIotEventsConsumerGroupName')]"
              },
              {
                "name": "PGPS_REQUESTS_DATABASE_NAME",
                "value": "[parameters('pgpsRequestDatabaseName')]"
              },
              {
                "name": "PGPS_REQUESTS_CONTAINER_NAME",
                "value": "[parameters('pgpsRequestContainerName')]"
              },
              {
                "name": "PGPS_REQUESTS_QUEUE_NAME",
                "value": "[parameters('pgpsRequestQueueName')]"
              },
              {
                "name": "PGPS_REQUESTS_NRFCLOUD_QUEUE_NAME",
                "value": "[parameters('pgpsRequestNrfCloudQueueName')]"
              },
              {
                "name": "CELL_GEOLOCATION_IOT_EVENTS_CONSUMER_GROUP_NAME",
                "value": "[parameters('cellGeoLocationIotEventsConsumerGroupName')]"
              },
              {
                "name": "SignalRConnectionString",
                "value": "[listKeys(resourceId('Microsoft.SignalRService/SignalR', concat(parameters('appName'), 'SignalR')), providers('Microsoft.SignalRService','SignalR').apiVersions[0]).primaryConnectionString]"
              },
              {
                "name": "NCELLMEAS_REPORTS_IOT_EVENTS_CONSUMER_GROUP_NAME",
                "value": "[parameters('ncellmeasReportsIotEventsConsumerGroupName')]"
              },
              {
                "name": "NCELLMEAS_REPORTS_DATABASE_NAME",
                "value": "[parameters('ncellmeasReportsDatabaseName')]"
              },
              {
                "name": "NCELLMEAS_REPORTS_CONTAINER_NAME",
                "value": "[parameters('ncellmeasReportsContainerName')]"
              },
              {
                "name": "NCELLMEAS_REPORTS_NRFCLOUD_LOCATION_CACHE_CONTAINER_NAME",
                "value": "[parameters('ncellmeasReportsNrfCloudLocationCacheContainerName')]"
              },
              {
                "name": "NCELLMEAS_REPORTS_QUEUE_NAME",
                "value": "[parameters('ncellmeasReportsQueueName')]"
              },
              {
                "name": "NCELLMEAS_REPORTS_NRFCLOUD_QUEUE_NAME",
                "value": "[parameters('ncellmeasReportsNrfCloudQueueName')]"
              },
              {
                "name": "STORE_DEVICE_UPDATES_IOT_EVENTS_CONSUMER_GROUP_NAME",
                "value": "[parameters('storeDeviceUpdatesIotEventsConsumerGroupName')]"
              }
            ]
          }
        }
      ]
    },
    {
      "type": "microsoft.insights/components",
      "apiVersion": "2018-05-01-preview",
      "name": "[concat(parameters('appName'), 'Insights')]",
      "location": "[parameters('location')]",
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', parameters('appName'))]": "Resource"
      },
      "properties": {
        "ApplicationId": "[parameters('appName')]",
        "Request_Source": "IbizaWebAppExtensionCreate"
      }
    },
    {
      "type": "Microsoft.SignalRService/SignalR",
      "apiVersion": "2018-10-01",
      "location": "[parameters('location')]",
      "name": "[concat(parameters('appName'), 'SignalR')]",
      "properties": {
        "hostNamePrefix": "[parameters('appName')]",
        "features": [
          {
            "flag": "ServiceMode",
            "value": "Serverless"
          }
        ]
      },
      "sku": {
        "capacity": "[parameters('SignalRcapacity')]",
        "name": "[parameters('SignalRpricingTier')]"
      }
    },
    {
      "name": "[concat(parameters('storageAccountName'),'/default/upgrades')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2019-06-01",
      "properties": {
        "publicAccess": "Blob"
      },
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', parameters('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2021-11-15-preview",
      "name": "[parameters('appName')]",
      "location": "[parameters('location')]",
      "properties": {
        "databaseAccountOfferType": "Standard",
        "locations": [
          {
            "id": "[concat(parameters('appName'), '-', parameters('location'))]",
            "failoverPriority": 0,
            "locationName": "[parameters('location')]"
          }
        ],
        "backupPolicy": {
          "type": "Periodic",
          "periodicModeProperties": {
            "backupIntervalInMinutes": 1440,
            "backupRetentionIntervalInHours": 168
          }
        },
        "isVirtualNetworkFilterEnabled": false,
        "virtualNetworkRules": [],
        "ipRules": [],
        "dependsOn": [],
        "capabilities": [
          {
            "name": "EnableServerless"
          }
        ],
        "enableFreeTier": false,
        "capacity": {
          "totalThroughputLimit": 4000
        }
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2020-03-01",
      "name": "[concat(parameters('appName'), '/deviceMessages')]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('appName'))]"
      ],
      "properties": {
        "resource": {
          "id": "deviceMessages"
        },
        "options": {}
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2020-03-01",
      "name": "[concat(parameters('appName'), '/deviceMessages/updates')]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('appName'), 'deviceMessages')]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('appName'))]"
      ],
      "properties": {
        "resource": {
          "id": "updates",
          "indexingPolicy": {
            "indexingMode": "consistent",
            "automatic": true,
            "includedPaths": [
              {
                "path": "/*"
              }
            ],
            "excludedPaths": [
              {
                "path": "/\"_etag\"/?"
              }
            ]
          },
          "partitionKey": {
            "paths": ["/deviceId"],
            "kind": "Hash"
          },
          "conflictResolutionPolicy": {
            "mode": "LastWriterWins",
            "conflictResolutionPath": "/_ts"
          },
          "compositeIndexes": [
            [
              {
                "path": "/source",
                "order": "ascending"
              }
            ]
          ]
        }
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2020-03-01",
      "name": "[concat(parameters('appName'), '/cellGeolocation')]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('appName'))]"
      ],
      "properties": {
        "resource": {
          "id": "cellGeolocation"
        },
        "options": {}
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2020-03-01",
      "name": "[concat(parameters('appName'), '/cellGeolocation/deviceCellGeolocations')]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('appName'), 'cellGeolocation')]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('appName'))]"
      ],
      "properties": {
        "resource": {
          "id": "deviceCellGeolocations",
          "indexingPolicy": {
            "indexingMode": "consistent",
            "automatic": true,
            "includedPaths": [
              {
                "path": "/*"
              }
            ],
            "excludedPaths": [
              {
                "path": "/\"_etag\"/?"
              }
            ]
          },
          "partitionKey": {
            "paths": ["/cellId"],
            "kind": "Hash"
          },
          "conflictResolutionPolicy": {
            "mode": "LastWriterWins",
            "conflictResolutionPath": "/_ts"
          },
          "compositeIndexes": [
            [
              {
                "path": "/source",
                "order": "ascending"
              }
            ]
          ]
        }
      }
    },
    {
      "condition": "[parameters('enableUnwiredLabsCellLocation')]",
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2020-03-01",
      "name": "[concat(parameters('appName'), '/cellGeolocation/unwiredLabsCache')]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('appName'), 'cellGeolocation')]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('appName'))]"
      ],
      "properties": {
        "resource": {
          "id": "unwiredLabsCache",
          "indexingPolicy": {
            "indexingMode": "consistent",
            "automatic": true,
            "includedPaths": [
              {
                "path": "/*"
              }
            ],
            "excludedPaths": [
              {
                "path": "/\"_etag\"/?"
              }
            ]
          },
          "partitionKey": {
            "paths": ["/cellId"],
            "kind": "Hash"
          },
          "conflictResolutionPolicy": {
            "mode": "LastWriterWins",
            "conflictResolutionPath": "/_ts"
          },
          "compositeIndexes": [
            [
              {
                "path": "/source",
                "order": "ascending"
              }
            ]
          ],
          "defaultTtl": 2592000
        }
      }
    },
    {
      "condition": "[parameters('enableNrfCloudCellLocationService')]",
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2020-03-01",
      "name": "[concat(parameters('appName'), '/cellGeolocation/nrfCloudCache')]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('appName'), 'cellGeolocation')]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('appName'))]"
      ],
      "properties": {
        "resource": {
          "id": "nrfCloudCache",
          "indexingPolicy": {
            "indexingMode": "consistent",
            "automatic": true,
            "includedPaths": [
              {
                "path": "/*"
              }
            ],
            "excludedPaths": [
              {
                "path": "/\"_etag\"/?"
              }
            ]
          },
          "partitionKey": {
            "paths": ["/cellId"],
            "kind": "Hash"
          },
          "conflictResolutionPolicy": {
            "mode": "LastWriterWins",
            "conflictResolutionPath": "/_ts"
          },
          "compositeIndexes": [
            [
              {
                "path": "/source",
                "order": "ascending"
              }
            ]
          ],
          "defaultTtl": "[mul(mul(int(parameters('agpsBinHours')), 60), 60)]"
        }
      }
    },
    {
      "condition": "[parameters('enableNrfCloudAGPSLocationService')]",
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2020-03-01",
      "name": "[concat(parameters('appName'), '/', parameters('agpsRequestDatabaseName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('appName'))]"
      ],
      "properties": {
        "resource": {
          "id": "[parameters('agpsRequestDatabaseName')]"
        },
        "options": {}
      }
    },
    {
      "condition": "[parameters('enableNrfCloudAGPSLocationService')]",
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2020-03-01",
      "name": "[concat(parameters('appName'), '/',parameters('agpsRequestDatabaseName'),'/', parameters('agpsRequestContainerName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('appName'), parameters('agpsRequestDatabaseName'))]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('appName'))]"
      ],
      "properties": {
        "resource": {
          "id": "[parameters('agpsRequestContainerName')]",
          "indexingPolicy": {
            "indexingMode": "consistent",
            "automatic": true,
            "includedPaths": [
              {
                "path": "/*"
              }
            ],
            "excludedPaths": [
              {
                "path": "/\"_etag\"/?"
              }
            ]
          },
          "conflictResolutionPolicy": {
            "mode": "LastWriterWins",
            "conflictResolutionPath": "/_ts"
          },
          "compositeIndexes": [
            [
              {
                "path": "/source",
                "order": "ascending"
              }
            ]
          ],
          "defaultTtl": 3600
        }
      }
    },
    {
      "condition": "[parameters('enableNrfCloudAGPSLocationService')]",
      "type": "Microsoft.Storage/storageAccounts/queueServices/queues",
      "apiVersion": "2021-04-01",
      "name": "[concat(parameters('storageAccountName'), '/default/', parameters('agpsRequestQueueName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ],
      "properties": {}
    },
    {
      "condition": "[parameters('enableNrfCloudAGPSLocationService')]",
      "type": "Microsoft.Storage/storageAccounts/queueServices/queues",
      "apiVersion": "2021-04-01",
      "name": "[concat(parameters('storageAccountName'), '/default/', parameters('agpsRequestNrfCloudQueueName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ],
      "properties": {}
    },
    {
      "condition": "[parameters('enableNrfCloudPGPSLocationService')]",
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2020-03-01",
      "name": "[concat(parameters('appName'), '/', parameters('pgpsRequestDatabaseName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('appName'))]"
      ],
      "properties": {
        "resource": {
          "id": "[parameters('pgpsRequestDatabaseName')]"
        },
        "options": {}
      }
    },
    {
      "condition": "[parameters('enableNrfCloudPGPSLocationService')]",
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2020-03-01",
      "name": "[concat(parameters('appName'), '/',parameters('pgpsRequestDatabaseName'),'/', parameters('pgpsRequestContainerName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('appName'), parameters('pgpsRequestDatabaseName'))]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('appName'))]"
      ],
      "properties": {
        "resource": {
          "id": "[parameters('pgpsRequestContainerName')]",
          "indexingPolicy": {
            "indexingMode": "consistent",
            "automatic": true,
            "includedPaths": [
              {
                "path": "/*"
              }
            ],
            "excludedPaths": [
              {
                "path": "/\"_etag\"/?"
              }
            ]
          },
          "conflictResolutionPolicy": {
            "mode": "LastWriterWins",
            "conflictResolutionPath": "/_ts"
          },
          "compositeIndexes": [
            [
              {
                "path": "/source",
                "order": "ascending"
              }
            ]
          ],
          "defaultTtl": 3600
        }
      }
    },
    {
      "condition": "[parameters('enableNrfCloudPGPSLocationService')]",
      "type": "Microsoft.Storage/storageAccounts/queueServices/queues",
      "apiVersion": "2021-04-01",
      "name": "[concat(parameters('storageAccountName'), '/default/', parameters('pgpsRequestQueueName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ],
      "properties": {}
    },
    {
      "condition": "[parameters('enableNrfCloudPGPSLocationService')]",
      "type": "Microsoft.Storage/storageAccounts/queueServices/queues",
      "apiVersion": "2021-04-01",
      "name": "[concat(parameters('storageAccountName'), '/default/', parameters('pgpsRequestNrfCloudQueueName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ],
      "properties": {}
    },
    {
      "condition": "[parameters('enableNrfCloudCellLocationService')]",
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2020-03-01",
      "name": "[concat(parameters('appName'), '/', parameters('ncellmeasReportsDatabaseName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('appName'))]"
      ],
      "properties": {
        "resource": {
          "id": "[parameters('ncellmeasReportsDatabaseName')]"
        },
        "options": {}
      }
    },
    {
      "condition": "[parameters('enableNrfCloudCellLocationService')]",
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2020-03-01",
      "name": "[concat(parameters('appName'), '/',parameters('ncellmeasReportsDatabaseName'),'/', parameters('ncellmeasReportsContainerName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('appName'), parameters('ncellmeasReportsDatabaseName'))]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('appName'))]"
      ],
      "properties": {
        "resource": {
          "id": "[parameters('ncellmeasReportsContainerName')]",
          "indexingPolicy": {
            "indexingMode": "consistent",
            "automatic": true,
            "includedPaths": [
              {
                "path": "/*"
              }
            ],
            "excludedPaths": [
              {
                "path": "/\"_etag\"/?"
              }
            ]
          },
          "conflictResolutionPolicy": {
            "mode": "LastWriterWins",
            "conflictResolutionPath": "/_ts"
          },
          "compositeIndexes": [
            [
              {
                "path": "/source",
                "order": "ascending"
              }
            ]
          ],
          "defaultTtl": 3600
        }
      }
    },
    {
      "condition": "[parameters('enableNrfCloudCellLocationService')]",
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2020-03-01",
      "name": "[concat(parameters('appName'), '/',parameters('ncellmeasReportsDatabaseName'),'/', parameters('ncellmeasReportsNrfCloudLocationCacheContainerName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('appName'), parameters('ncellmeasReportsDatabaseName'))]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('appName'))]"
      ],
      "properties": {
        "resource": {
          "id": "[parameters('ncellmeasReportsNrfCloudLocationCacheContainerName')]",
          "indexingPolicy": {
            "indexingMode": "consistent",
            "automatic": true,
            "includedPaths": [
              {
                "path": "/*"
              }
            ],
            "excludedPaths": [
              {
                "path": "/\"_etag\"/?"
              }
            ]
          },
          "conflictResolutionPolicy": {
            "mode": "LastWriterWins",
            "conflictResolutionPath": "/_ts"
          },
          "compositeIndexes": [
            [
              {
                "path": "/source",
                "order": "ascending"
              }
            ]
          ],
          "defaultTtl": 3600
        }
      }
    },
    {
      "condition": "[parameters('enableNrfCloudCellLocationService')]",
      "type": "Microsoft.Storage/storageAccounts/queueServices/queues",
      "apiVersion": "2021-04-01",
      "name": "[concat(parameters('storageAccountName'), '/default/', parameters('ncellmeasReportsQueueName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ],
      "properties": {}
    },
    {
      "condition": "[parameters('enableNrfCloudCellLocationService')]",
      "type": "Microsoft.Storage/storageAccounts/queueServices/queues",
      "apiVersion": "2021-04-01",
      "name": "[concat(parameters('storageAccountName'), '/default/', parameters('ncellmeasReportsNrfCloudQueueName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ],
      "properties": {}
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "name": "[parameters('keyVaultName')]",
      "apiVersion": "2021-11-01-preview",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Web/Sites/', concat(parameters('appName'), 'API'))]"
      ],
      "properties": {
        "enableRbacAuthorization": true,
        "enabledForDeployment": false,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": false,
        "tenantId": "[subscription().tenantId]",
        "sku": {
          "name": "Standard",
          "family": "A"
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/providers/roleAssignments",
      "apiVersion": "2018-01-01-preview",
      "name": "[concat(parameters('keyVaultName'), '/Microsoft.Authorization/', variables('uniqueRoleGuidKeyVaultSecretsUser'))]",
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentity'))]"
      ],
      "properties": {
        "roleDefinitionId": "[variables('keyVaultSecretsUser')]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', variables('managedIdentity')), '2018-11-30').principalId]",
        "scope": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
        "principalType": "ServicePrincipal"
      }
    }
  ],
  "outputs": {
    "IoTHubConnectionString": {
      "type": "string",
      "value": "[concat('HostName=', reference(resourceId('Microsoft.Devices/IoTHubs', concat(parameters('appName'), 'IotHub')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).hostName, ';SharedAccessKeyName=iothubowner;SharedAccessKey=', listKeys(resourceId('Microsoft.Devices/IotHubs', concat(parameters('appName'), 'IotHub')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).value[0].primaryKey)]"
    },
    "IOTHUB_EVENTS_CONNECTION_STRING": {
      "type": "string",
      "value": "[concat('Endpoint=', reference(resourceId('Microsoft.Devices/IoTHubs', concat(parameters('appName'), 'IotHub')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).eventHubEndpoints.events.endpoint, ';SharedAccessKeyName=iothubowner;SharedAccessKey=', listKeys(resourceId('Microsoft.Devices/IotHubs', concat(parameters('appName'), 'IotHub')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).value[0].primaryKey, ';EntityPath=', reference(resourceId('Microsoft.Devices/IoTHubs', concat(parameters('appName'), 'IotHub')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).eventHubEndpoints.events.path)]"
    },
    "IoTHubDPSConnectionString": {
      "type": "string",
      "value": "[concat('HostName=', reference(resourceId('Microsoft.Devices/provisioningServices', concat(parameters('appName'), 'ProvisioningService')), providers('Microsoft.Devices', 'provisioningServices').apiVersions[0]).serviceOperationsHostName, ';SharedAccessKeyName=provisioningserviceowner;SharedAccessKey=', listKeys(resourceId('Microsoft.Devices/provisioningServices', concat(parameters('appName'), 'ProvisioningService')), providers('Microsoft.Devices', 'provisioningServices').apiVersions[0]).value[0].primaryKey)]"
    }
  }
}
