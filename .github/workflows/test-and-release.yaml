name: Test and Release

on:
  workflow_dispatch:
    inputs:
      clearCertificates:
        description: "Clear certificates"
        required: false
        default: "no"
  push:
    paths-ignore:
      - Dockerfile
      - .github/workflows/test-docker.yaml
      - .github/workflows/publish-docker.yaml
      - .github/workflows/cd.yaml

jobs:
  tests:
    runs-on: ubuntu-latest

    # Running CI in clean environment is currently not possible: https://github.com/NordicSemiconductor/asset-tracker-cloud-azure-js/issues/1
    environment:
      name: ci

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      APP_NAME: ${{ secrets.APP_NAME }}
      B2C_TENANT: ${{ secrets.B2C_TENANT }}
      LOCATION: ${{ secrets.LOCATION }}
      APP_REG_CLIENT_ID: ${{ secrets.APP_REG_CLIENT_ID }}
      B2C_CLIENT_SECRET: ${{ secrets.B2C_CLIENT_SECRET }}
      B2C_TENANT_ID: ${{ secrets.B2C_TENANT_ID }}
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}

    steps:
      - uses: actions/checkout@v2
      - name: Install Azure CLI
        if: env.AZURE_CREDENTIALS != ''
        run: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
      - name: Login to Azure
        if: env.AZURE_CREDENTIALS != ''
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: List Azure accounts
        if: env.AZURE_CREDENTIALS != ''
        run: az account list --output table
      - name: Install Azures Functions CLI
        if: env.AZURE_CREDENTIALS != ''
        run: |
          curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
          sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg
          sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-$(lsb_release -cs)-prod $(lsb_release -cs) main" > /etc/apt/sources.list.d/dotnetdev.list'
          sudo apt-get update
          sudo apt-get install azure-functions-core-tools-3
      - uses: actions/setup-node@v2
        with:
          node-version: "16.x"
      - name: Keep npm cache around to speed up installs
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci --no-audit
      - run: npx tsc
      - name: Run Unit Tests
        run: npm test
      - name: Generate run ID
        run: |
          RUN_ID=`uuidgen | cut -d- -f1`
          echo "RUN_ID=${RUN_ID}" >> $GITHUB_ENV
      - name: Generate name for Mock HTTP API resource group
        run: |
          MOCK_HTTP_API_RESOURCE_GROUP=`echo mock-http-api-${RUN_ID} | tr -dc '[:alnum:]'`
          echo "MOCK_HTTP_API_RESOURCE_GROUP=${MOCK_HTTP_API_RESOURCE_GROUP}" >> $GITHUB_ENV
      - name: Deploy Mock HTTP API
        run: |
          az group create --name ${MOCK_HTTP_API_RESOURCE_GROUP} --location ${LOCATION:-northeurope}
          az deployment group create \
            --resource-group ${MOCK_HTTP_API_RESOURCE_GROUP} \
            --mode Complete \
            --name test-${{ github.sha }} \
            --template-file mock-http-api.json
          echo "MOCK_HTTP_API_ENDPOINT=`az functionapp show -g ${MOCK_HTTP_API_RESOURCE_GROUP} -n ${MOCK_HTTP_API_RESOURCE_GROUP}functions | jq -r '.defaultHostName'`" >> $GITHUB_ENV
          node scripts/pack-mock-http-api-app.js
          az functionapp deployment source config-zip -g ${MOCK_HTTP_API_RESOURCE_GROUP} -n ${MOCK_HTTP_API_RESOURCE_GROUP}functions --src dist/mock-http-api.zip
      - name: Deploy solution
        if: env.AZURE_CREDENTIALS != ''
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          retry_wait_seconds: 300
          max_attempts: 3
          command: |
            az deployment group create \
              --resource-group ${RESOURCE_GROUP:-nrfassettrackerci} \
              --mode Complete \
              --name test-${{ github.sha }} \
              --template-file azuredeploy.json \
              --parameters \
                appName=${APP_NAME:-nrfassettrackerci} \
                appRegistrationClientId=${APP_REG_CLIENT_ID} \
                b2cTenant=${B2C_TENANT} \
                b2cFlowName=B2C_1_developer \
                enableUnwiredLabsCellLocation=true \
                unwiredlabsApiEndpoint=https://${MOCK_HTTP_API_ENDPOINT}/api/eu1.unwiredlabs.com/ \
                enableNrfCloudCellLocation=true \
                nrfCloudTeamId=`uuidgen` \
                nrfCloudApiEndpoint=https://${MOCK_HTTP_API_ENDPOINT}/api/api.nrfcloud.com/
      - name: Set secrets for third party APIs
        run: |
          USER_OBJECT_ID=`az ad signed-in-user show --query 'objectId' -o tsv | tr -d '\n'`
          az keyvault set-policy --name ${APP_NAME:-nrfassettrackerci}-keyvault --object-id ${USER_OBJECT_ID} --secret-permissions set
          az keyvault secret set --vault-name ${APP_NAME:-nrfassettrackerci}-keyvault --name unwiredlabsApiKey --value my-secret
          openssl ecparam -name secp256k1 -genkey > nrfcloudlocationservice.key
          az keyvault secret set --vault-name ${APP_NAME:-nrfassettrackerci}-keyvault --name nrfCloudCellLocationServiceKey --file nrfcloudlocationservice.key
      - name: Deploy Function App
        if: env.AZURE_CREDENTIALS != ''
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          retry_wait_seconds: 300
          max_attempts: 3
          command: |
            node scripts/pack-app.js
            az functionapp deployment source config-zip -g ${RESOURCE_GROUP:-nrfassettrackerci} -n ${APP_NAME:-nrfassettrackerci}api --src dist/functionapp.zip
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: functionapp-${{ github.sha }}
          path: dist/functionapp.zip
      - name: Cache certificates
        if: env.AZURE_CREDENTIALS != ''
        uses: actions/cache@v2
        with:
          path: ./certificates
          key: certificates-2021-09-01
      - name: Clear certificates
        if: github.event.inputs.clearCertificates == 'yes'
        run: |
          rm -rf ./certificates
        continue-on-error: true
      - name: Check if intermediate cert exists
        if: env.AZURE_CREDENTIALS != ''
        run: |
          ls ./certificates/*/CA.intermediate.* 1> /dev/null 2>&1
          echo "SKIP_CERT_GENERATION=1" >> $GITHUB_ENV
        continue-on-error: true
      - name: Create Intermediate CA certificate
        if: env.AZURE_CREDENTIALS != '' && env.SKIP_CERT_GENERATION != '1'
        run: |
          node cli create-ca-root
          node cli proof-ca-root-possession
          node cli create-ca-intermediate
      - name: Run End-to-End Tests
        if: env.AZURE_CREDENTIALS != ''
        uses: nick-invision/retry@v2
        env:
          FORCE_COLOR: 3
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: npm run test:e2e
      - name: Delete device certificates
        if: env.AZURE_CREDENTIALS != ''
        run: rm ./certificates/*/device-*
      - name: Delete Mock HTTP API
        continue-on-error: true
        run: |
          az group delete -y --no-wait --name ${MOCK_HTTP_API_RESOURCE_GROUP} --location ${LOCATION:-northeurope}
      - name: Semantic release
        if: success()
        continue-on-error: true
        run: npx semantic-release
