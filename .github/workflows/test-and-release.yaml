name: Test and Release

on:
  workflow_dispatch:
  push:
    paths-ignore:
      - Dockerfile
      - .github/workflows/test-docker.yaml
      - .github/workflows/publish-docker.yaml
      - .github/workflows/cd.yaml

jobs:
  tests:
    runs-on: ubuntu-latest

    # Running CI in clean environment is currently not possible: https://github.com/NordicSemiconductor/asset-tracker-cloud-azure-js/issues/1
    environment:
      name: ci

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      APP_NAME: ${{ secrets.APP_NAME }}
      B2C_TENANT: ${{ secrets.B2C_TENANT }}
      LOCATION: ${{ secrets.LOCATION }}
      APP_REG_CLIENT_ID: ${{ secrets.APP_REG_CLIENT_ID }}
      B2C_CLIENT_SECRET: ${{ secrets.B2C_CLIENT_SECRET }}
      B2C_TENANT_ID: ${{ secrets.B2C_TENANT_ID }}
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
      MOCK_HTTP_API_STORAGE_ACCOUNT_NAME: mockhttpapi

    steps:
      - uses: actions/checkout@v2
      - name: Extract tenant ID, client ID, and secret
        run: |
          echo "${{ env.AZURE_CREDENTIALS }}" > creds.json
          AZURE_CLIENT_ID=`cat creds.json | jq -r '.clientId'`
          AZURE_CLIENT_SECRET=`cat creds.json | jq -r '.clientSecret'`
          AZURE_TENANT_ID=`cat creds.json | jq -r '.tenantId'`
          rm creds.json
          echo "::add-mask::${AZURE_CLIENT_ID}"
          echo "::add-mask::${AZURE_CLIENT_SECRET}"
          echo "::add-mask::${AZURE_TENANT_ID}"
          echo AZURE_CLIENT_ID=${AZURE_CLIENT_ID} >> $GITHUB_ENV
          echo AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET} >> $GITHUB_ENV
          echo AZURE_TENANT_ID=${AZURE_TENANT_ID} >> $GITHUB_ENV
      - name: Login to Azure
        if: env.AZURE_CREDENTIALS != ''
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az login --service-principal -u ${AZURE_CLIENT_ID} -p ${AZURE_CLIENT_SECRET} --tenant ${AZURE_TENANT_ID}
      - name: List Azure accounts
        if: env.AZURE_CREDENTIALS != ''
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az account list --output table
      - uses: actions/setup-node@v2
        with:
          node-version: "16.x"
      - name: Keep npm cache around to speed up installs
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci --no-audit
      - run: npx tsc
      - name: Run Unit Tests
        run: npm test
      - name: Deploy Mock HTTP API
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az deployment group create \
              --resource-group ${RESOURCE_GROUP:-nrfassettrackerci} \
              --mode Incremental \
              --name test-mock-http-api-${{ github.sha }} \
              --template-file mock-http-api.json \
              --parameters \
                storageAccountName=${MOCK_HTTP_API_STORAGE_ACCOUNT_NAME:-mockhttpapi}
      - name: Determine Mock API endpoint
        uses: azure/CLI@v1
        with:
          inlineScript: |
            echo "MOCK_HTTP_API_ENDPOINT=`az functionapp show -g ${RESOURCE_GROUP:-nrfassettrackerci} -n ${MOCK_HTTP_API_STORAGE_ACCOUNT_NAME:-mockhttpapi}Functions | jq -r '.defaultHostName'`" >> $GITHUB_ENV
      - name: Pack mock functions
        run: node scripts/pack-mock-http-api-app.js
      - name: Deploy mock functions
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az functionapp deployment source config-zip -g ${RESOURCE_GROUP:-nrfassettrackerci} -n ${MOCK_HTTP_API_STORAGE_ACCOUNT_NAME:-mockhttpapi}Functions --src dist/mock-http-api.zip
      - name: Set Key Vault name
        run: |
          echo "keyVaultName=${APP_NAME:-nrfassettrackerci}" >> $GITHUB_ENV
      - name: Set random nRF Cloud Team ID
        run: |
          echo "NRF_CLOUD_TEAM_ID=`uuidgen`" >> $GITHUB_ENV
      - name: Deploy solution
        if: env.AZURE_CREDENTIALS != ''
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az deployment group create \
              --resource-group ${RESOURCE_GROUP:-nrfassettrackerci} \
              --mode Incremental \
              --name test-${{ github.sha }} \
              --template-file azuredeploy.json \
              --parameters \
                appName=${APP_NAME:-nrfassettrackerci} \
                appRegistrationClientId=${APP_REG_CLIENT_ID} \
                b2cTenant=${B2C_TENANT} \
                b2cFlowName=B2C_1_developer \
                enableUnwiredLabsCellLocation=true \
                unwiredlabsApiEndpoint=https://${MOCK_HTTP_API_ENDPOINT}/api/eu1.unwiredlabs.com/ \
                enableNrfCloudCellLocationService=true \
                enableNrfCloudAGPSLocationService=true \
                enableNrfCloudPGPSLocationService=true \
                nrfCloudTeamId=${NRF_CLOUD_TEAM_ID} \
                nrfCloudApiEndpoint=https://${MOCK_HTTP_API_ENDPOINT}/api/api.nrfcloud.com/ \
                keyVaultName=${keyVaultName}
      - name: Set secrets for third party APIs
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az keyvault set-policy --name ${keyVaultName} --object-id ${AZURE_CLIENT_ID} --secret-permissions set
            az keyvault secret set --vault-name ${keyVaultName} --name unwiredlabsApiKey --value my-secret
            openssl ecparam -name secp256k1 -genkey > nrfcloudcelllocationservice.key
            az keyvault secret set --vault-name ${keyVaultName} --name nrfCloudCellLocationServiceKey --file nrfcloudcelllocationservice.key
            openssl ecparam -name secp256k1 -genkey > nrfcloudagpslocationservice.key
            az keyvault secret set --vault-name ${keyVaultName} --name nrfCloudAGPSLocationServiceKey --file nrfcloudagpslocationservice.key
            openssl ecparam -name secp256k1 -genkey > nrfcloudpgpslocationservice.key
            az keyvault secret set --vault-name ${keyVaultName} --name nrfCloudPGPSLocationServiceKey --file nrfcloudpgpslocationservice.key
      - name: Pack functions
        run: node scripts/pack-app.js
      - name: Deploy Function App
        if: env.AZURE_CREDENTIALS != ''
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az functionapp deployment source config-zip -g ${RESOURCE_GROUP:-nrfassettrackerci} -n ${APP_NAME:-nrfassettrackerci}api --src dist/functionapp.zip
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: functionapp-${{ github.sha }}
          path: dist/functionapp.zip
      - name: Cache certificates
        if: env.AZURE_CREDENTIALS != '' != 'yes'
        uses: actions/cache@v2
        id: certs-cache
        with:
          path: ./certificates
          key: certificates-2021-09-13
      - name: Create Intermediate CA certificate
        if: |
          env.AZURE_CREDENTIALS != '' && steps.certs-cache.outputs.cache-hit != 'true'
        run: |
          node cli create-ca-root
          node cli proof-ca-root-possession
          node cli create-ca-intermediate
      - name: Run End-to-End Tests
        if: env.AZURE_CREDENTIALS != ''
        uses: nick-invision/retry@v2
        env:
          FORCE_COLOR: 3
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: npm run test:e2e
      - name: Delete device certificates
        if: env.AZURE_CREDENTIALS != ''
        run: rm ./certificates/*/device-*
      - name: Semantic release
        if: success()
        continue-on-error: true
        run: npx semantic-release
